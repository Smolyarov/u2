#include <math.h>
#include <string.h>
#include <limits.h>

#include "main.h"
#include "message.hpp"
#include "mavdbg.hpp"
#include "param_registry.hpp"
#include "pack_unpack.hpp"
#include "array_len.hpp"

/*
 ******************************************************************************
 * DEFINES
 ******************************************************************************
 */
#define ADDITIONAL_WRITE_TMO    MS2ST(10)

#define PARAM_VALUE_SIZE        (sizeof(*((GlobalParam[0]).valuep)))
#define PARAM_RECORD_SIZE       (PARAM_ID_SIZE + PARAM_VALUE_SIZE)

#define PARAM_FILE_NAME         ("param")

/*
 ******************************************************************************
 * PROTOTYPES
 ******************************************************************************
 */

/*
 ******************************************************************************
 * EXTERNS
 ******************************************************************************
 */
ParamRegistry param_registry;

/*
 ******************************************************************************
 * GLOBAL VARIABLES
 ******************************************************************************
 */

#include "param_autogenerated.cpp"

const GlobalParam_t *ParamRegistry::param_array = GlobalParam;
static uint8_t eeprombuf[PARAM_RECORD_SIZE];

/*
 *******************************************************************************
 *******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************
 *******************************************************************************
 */
/**
 *
 */
void ParamRegistry::acquire(void){
  this->sem.wait();
}

/**
 *
 */
void ParamRegistry::release(void){
  this->sem.signal();
}

/**
 * @brief   Performs key-value search. Low level function
 *
 * @return      Index in dictionary.
 * @retval -1   key not found.
 */
int32_t ParamRegistry::key_index_search(const char* key){
  int32_t i = 0;

  for (i = 0; i < OnboardParamCount; i++){
    if (strcmp(key, param_array[i].name) == 0)
      return i;
  }
  return -1;
}

void ParamRegistry::store_value(int32_t i, float **vp){
  osalDbgCheck(MAVLINK_TYPE_FLOAT == param_array[i].param_type);
  *vp = &param_array[i].valuep->f32;
}

void ParamRegistry::store_value(int32_t i, int32_t **vp){
  osalDbgCheck(MAVLINK_TYPE_INT32_T == param_array[i].param_type);
  *vp = &param_array[i].valuep->i32;
}

void ParamRegistry::store_value(int32_t i, uint32_t **vp){
  osalDbgCheck(MAVLINK_TYPE_UINT32_T == param_array[i].param_type);
  *vp = &param_array[i].valuep->u32;
}

void ParamRegistry::store_value(int32_t i, const float **vp){
  osalDbgCheck(MAVLINK_TYPE_FLOAT == param_array[i].param_type);
  *vp = &param_array[i].valuep->f32;
}

void ParamRegistry::store_value(int32_t i, const int32_t **vp){
  osalDbgCheck(MAVLINK_TYPE_INT32_T == param_array[i].param_type);
  *vp = &param_array[i].valuep->i32;
}

void ParamRegistry::store_value(int32_t i, const uint32_t **vp){
  osalDbgCheck(MAVLINK_TYPE_UINT32_T == param_array[i].param_type);
  *vp = &param_array[i].valuep->u32;
}

/**
 * This functions created for smooth update of parameter registry in case
 * adding of some new parameters somewhere in middle.
 * 1) get name from MCU's flash
 * 2) perform brute force search in EEPROM file
 */
bool ParamRegistry::load_extensive(void){
  int32_t  i = 0, n = 0;
  uint32_t status = 0;
  floatint v;
  v.u32 = 0;
  bool found = false;

  acquire();

  for (i = 0; i < this->paramCount(); i++){
    ParamFile->setPosition(0);
    found = false;

    for (n=0; n<this->paramCount(); n++){
      status = ParamFile->read(eeprombuf, PARAM_RECORD_SIZE);
      if (status < PARAM_RECORD_SIZE){
        osalSysHalt("");
        return OSAL_FAILED;
      }
      if (strcmp((const char *)eeprombuf, param_array[i].name) == 0){
        found = true;
        break;
      }
    }

    /* was parameter previously stored in eeprom */
    if (found){
      v.u32 = pack8to32be(&(eeprombuf[PARAM_ID_SIZE]));
    }
    else{
      /* use hardcoded default */
      v.u32 = param_array[i].def.u32;
    }

    /* check value acceptability and set it */
    validator.set(&v, &(param_array[i]));
  }

  release();
  saveAll();
  return OSAL_SUCCESS;
}



/*
 *******************************************************************************
 * EXPORTED FUNCTIONS
 *******************************************************************************
 */
/**
 *
 */
ParamRegistry::ParamRegistry(void) :
ready(false),
sem(false)
{
  int32_t i = 0;
  int32_t n = 0;
  int32_t len = 0;

  len = paramCount();

  osalDbgAssert((sizeof(gp_val) / sizeof(gp_val[0])) == len,
      "sizes of volatile array and param array must be equal");
  val = gp_val;

  /* initialise variable array with zeroes to be safer */
  floatint v;
  v.u32 = 0;
  for (i = 0; i < len; i++){
    val[i] = v;
  }

  /* check hardcoded name lengths */
  for (i = 0; i<len; i++){
    if (sizeof (*(param_array[i].name)) > ONBOARD_PARAM_NAME_LENGTH)
      osalSysHalt("name too long");
  }

  /* check for keys' names collisions */
  for (n=0; n<len; n++){
    for (i=n+1; i<len; i++){
      if (0 == strcmp(param_array[i].name, param_array[n].name))
        osalSysHalt("name collision detected");
    }
  }
}

/**
 *
 */
bool ParamRegistry::syncParam(const char* key){
  int32_t  i;
  uint32_t status = 0;
  uint32_t v = 0;
  uint8_t  tmpbuf[PARAM_RECORD_SIZE];

  i = key_index_search(key);
  osalDbgAssert(i != -1, "Not found");

  acquire();
  ParamFile->setPosition(i * PARAM_RECORD_SIZE);

  /* ensure we found exacly what needed */
  status = ParamFile->read(tmpbuf, sizeof(tmpbuf));
  osalDbgAssert(status == sizeof(tmpbuf), "read failed");
  osalDbgAssert(strcmp((char *)tmpbuf, key) == 0, "param not found in EEPROM");

  /* write only if value differ */
  ParamFile->setPosition(ParamFile->getPosition() - PARAM_VALUE_SIZE);
  v = ParamFile->getU32();
  if (v != GlobalParam[i].valuep->u32){
    ParamFile->setPosition(ParamFile->getPosition() - PARAM_VALUE_SIZE);
    status = ParamFile->putU32(GlobalParam[i].valuep->u32);
    osalDbgAssert(status == sizeof(uint32_t), "read failed");
    chThdSleep(ADDITIONAL_WRITE_TMO);
  }

  release();
  return OSAL_SUCCESS;
}

/**
 *
 */
bool ParamRegistry::load(void){
  int32_t  i = 0;
  int32_t  cmpresult = -1;
  uint32_t status = 0;
  floatint v;
  v.u32 = 0;

  /* try to open file */
  ParamFile = nvram_fs.open(PARAM_FILE_NAME);
  if (NULL == ParamFile){
    /* try to bootrstap */
    if (nvram_fs.df() < BOOTSTRAP_PARAM_FILE_SIZE)
      osalSysHalt("Not enough free space in nvram to create parameters file");
    else{
      ParamFile = nvram_fs.create(PARAM_FILE_NAME, BOOTSTRAP_PARAM_FILE_SIZE);
      osalDbgCheck(NULL != ParamFile);
    }
  }

  /* check reserved space in EEPROM */
  osalDbgAssert(((PARAM_RECORD_SIZE * this->paramCount()) < ParamFile->getSize()),
          "not enough space in file");

  acquire();
  ParamFile->setPosition(0);

  for (i = 0; i < this->paramCount(); i++){

    /* read field from EEPROM and check number of red bytes */
    status = ParamFile->read(eeprombuf, PARAM_RECORD_SIZE);
    if (status < PARAM_RECORD_SIZE){
      osalSysHalt("");
      return OSAL_FAILED;
    }

    /* if no updates was previously in parameter structure than order of
     * parameters in registry must be the same as in eeprom */
    cmpresult = strcmp(GlobalParam[i].name, (char *)eeprombuf);
    if (0 == cmpresult){   /* OK, this parameter already presents in EEPROM */
      v.u32 = pack8to32be(&(eeprombuf[PARAM_ID_SIZE]));
    }
    else{
      /* there is not such parameter in EEPROM. Possible reasons:
       * 1) parameter "registry" has been changed.
       * 2) this is very first run of device with totally empty EEPROM
       * To correctly fix this situation we just need to
       * save structure to EEPROM after loading of all parameters to RAM.
       */
      release();
      return load_extensive();
    }

    /* check value acceptability and set it */
    validator.set(&v, &(GlobalParam[i]));
  }

  release();
  return OSAL_SUCCESS;
}

/**
 *
 */
bool ParamRegistry::saveAll(void){
  int32_t  i;
  uint32_t status = 0;
  uint32_t v = 0;
  uint8_t tmpbuf[PARAM_RECORD_SIZE];

  acquire();
  ParamFile->setPosition(0);

  for (i = 0; i < this->paramCount(); i++){

    /* first copy parameter name in buffer */
    memcpy(eeprombuf, GlobalParam[i].name, PARAM_ID_SIZE);

    /* now write data */
    v = GlobalParam[i].valuep->u32;
    unpack32to8be(v, &(eeprombuf[PARAM_ID_SIZE]));
    status = ParamFile->write(eeprombuf, PARAM_RECORD_SIZE);
    osalDbgAssert(status == PARAM_RECORD_SIZE, "write failed");

    /* check written data */
    ParamFile->setPosition(ParamFile->getPosition() - PARAM_RECORD_SIZE);
    status = ParamFile->read(tmpbuf, sizeof(tmpbuf));
    if (0 != memcmp(tmpbuf, eeprombuf, (PARAM_ID_SIZE + sizeof(v))))
      osalSysHalt("Verification failed");

    chThdSleep(ADDITIONAL_WRITE_TMO);
  }

  release();
  return OSAL_SUCCESS;
}

/**
 *
 */
param_status_t ParamRegistry::setParam(const floatint *value, const GlobalParam_t *param){
  return validator.set(value, param);
}

/**
 *
 */
int32_t ParamRegistry::paramCount(void){
  return ArrayLen(GlobalParam);
}

/**
 * @brief   Retrieve parameter from registry.
 *
 * @param[in] key     if NULL than perform search by index
 * @param[in] n       search index
 * @param[out] *i     store founded index here. Set to NULL if not used
 *
 * @return    pointer to parameter structure
 * @retval    NULL - parameter not found
 */
const GlobalParam_t *ParamRegistry::getParam(const char *key, int32_t n, int32_t *i){
  int32_t index = -1;

  if (key != NULL){
    index = param_registry.key_index_search(key);
    if (-1 == index)
      return NULL;
  }
  else{
    if ((n > paramCount()) || (-1 == n))
      return NULL;
    else
      index = n;
  }

  /**/
  if (NULL != i)
    *i = index;
  return &(param_array[index]);
}
