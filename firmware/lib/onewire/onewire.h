/*
    ChibiOS/RT - Copyright (C) 2014 Uladzimir Pylinsky aka barthess

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#ifndef ONEWIRE_H_
#define ONEWIRE_H_

#include "hal.h"

#define ONEWIRE_SYNTH_SEARCH_TEST         FALSE

#define ONEWIRE_USE_PARASITIC_POWER       TRUE

#define ONEWIRE_CMD_READ_ROM              0x33
#define ONEWIRE_CMD_SEARCH_ROM            0xF0
#define ONEWIRE_CMD_MATCH_ROM             0x55
#define ONEWIRE_CMD_SKIP_ROM              0xCC
#define ONEWIRE_CMD_CONVERT_TEMP          0x44
#define ONEWIRE_CMD_READ_SCRATCHPAD       0xBE

typedef void (*onewire_pullup_assert_t)(void);
typedef void (*onewire_pullup_release_t)(void);

typedef enum {
  OW_UNINIT = 0,
  OW_STOP = 1,
  OW_READY = 2,
  OW_PULL_UP
} onewire_state_t;

typedef enum {
  OW_SEARCH_ROM_SUCCESS = 0,
  OW_SEARCH_ROM_LAST,
  OW_SEARCH_ROM_ERROR
} search_rom_result_t;

typedef enum {
  OW_SEARCH_ROM_FIRST = 0,
  OW_SEARCH_ROM_NEXT
} search_iteration_t;

typedef struct {
  PWMDriver *pwmd;
  size_t    master_channel;
  size_t    sample_channel;
#if ONEWIRE_USE_PARASITIC_POWER
  onewire_pullup_assert_t onewire_pullup_assert;
  onewire_pullup_release_t onewire_pullup_release;
#endif
} OWConfig;

/**
 * small search rom fields combined in single machine word to save RAM
 */
typedef struct {
  uint32_t      single_device: 1;   /**< @brief Bool flag                   */
  uint32_t      search_iter: 1;     /**< @brief 0 - first, 1 - next         */
  uint32_t      result: 2;          /**< @brief 0 - success, 1 - last, 2 - error.*/
  uint32_t      bit_step: 2;        /**< @brief 0 - direct, 1 - complemented, 2 - generated by master.     */
  uint32_t      bit_buf: 2;         /**< @brief Acquired bits. 0s - direct, 1st - complement  */
  uint32_t      rombit: 7;          /**< @brief Currently processing ROM bit. Must be big enough to store number 64.*/
  uint32_t      devices_found: 8;   /**< @brief Devices count discovered on bus .*/
} search_rom_reg_t;

/**
 * @brief   Helper structure for search ROM procedure
 */
typedef struct {
  search_rom_reg_t  reg;
  uint8_t           *retbuf; /* buffer for currently discovering ROM */
  uint8_t           prev_path[8];
  int8_t            last_zero_branch; /* negative values uses to point out of tree root */
  int8_t            prev_zero_branch; /* negative values uses to point out of tree root */
} OWSearchRom;


/**
 * small search rom fields combined in single machine word
 */
typedef struct {
#if ONEWIRE_USE_PARASITIC_POWER
  /**
   * @note    Assert this flag _before_ sending of measurement command
   * @note    This flag will be cleared from ISR
   */
  uint32_t      need_pullup: 1;
#endif
  uint32_t      slave_present: 1;   /**< @brief Bool flag                   */
  uint32_t      state: 2;           /**< @brief Driver state         */
  uint32_t      bit: 4;             /**< @brief Bit number in currently receiving byte. Must be big enough to store 8 */
  uint32_t      final_timeslot: 1;  /**< @brief bool flag for premature timer stop prevention */
  uint32_t      bytes: 16;          /**< @brief Bytes number to be processing in current transaction.     */
} onewire_reg_t;


/**
 *
 */
typedef struct {
  onewire_reg_t     reg;
  const OWConfig    *config;
  PWMConfig         pwmcfg;
  uint8_t           *buf;
  OWSearchRom       search_rom;

  /**
   * @brief   Thread waiting for I/O completion.
   */
  thread_reference_t  thread;
} OWDriver;

extern OWDriver OWD1;

#ifdef __cplusplus
extern "C" {
#endif
  void onewireInit(void);
  void onewireObjectInit(OWDriver *owp);
  void onewireStart(OWDriver *owp, const OWConfig *config);
  void onewireStop(OWDriver *owp);
  bool onewireReset(OWDriver *owp);
  void onewireRead(OWDriver *owp, uint8_t *rxbuf, size_t rxbytes);
  void onewireWrite(OWDriver *owp, uint8_t *txbuf, size_t txbytes, systime_t pullup_time);
  size_t onewireSearchRom(OWDriver *owp, uint8_t *result, size_t max_rom_cnt);
  uint8_t onewireCRC(const uint8_t *buf, size_t len);
//#if ONEWIRE_USE_PARASITIC_POWER
//  void onewirePullUpRelease(OWDriver *owp);
//#endif
#if SYNTH_SEARCH_TEST
  void _synth_ow_write_bit(OWDriver *owp, uint8_t bit);
  uint_fast8_t _synth_ow_read_bit(void);
  void synthSearchRomTest(OWDriver *owp);
#endif
#ifdef __cplusplus
}
#endif

#endif /* ONEWIRE_H_ */
